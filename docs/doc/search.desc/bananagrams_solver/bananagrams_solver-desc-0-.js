searchState.loadedDescShard("bananagrams_solver", 0, "Controls the state of the app\nNumber rows/columns in the board\nThe current board\nRepresents a board and its minimum and maximum played …\nRepresents the current settings\nEnumeration of the direction a word is played\nValue of an empty cell on the board\nAll letters have been used\nThe previous game state\nOne or more letters are greater by one or more\nAll letters are the same except exactly one is greater by …\nThe word was played horizontally\nFor comparing a current hand of letters to a previous hand\nEnumeration of how many letters have been used\nRepresents a hand of letters\nThe maximum length of any word in the dictionary\nMore letters have been used than are available\nStruct returned when getting playable words\nThe number of each letter present in regular Bananagrams\nThere are still unused letters\nRepresents a set of removable indices that will storm form …\nThe hand is the same as before\nStruct returned when a board is solved\nAt least one letter has fewer than the previous letter\nAll uppercase letters in the Latin alphabet\nRepresents a game undo or redo\nThe word was played vertically\nA numeric representation of a word\nConverts a <code>board</code> to a <code>String</code>\nComplete Scrabble dictionary\nDictionary of the ~20k most common words in English\nThe underlying vector of the board\nThe solved board\nThe previous board\nConverts a <code>board</code> to a vector of vectors of strings\nChecks which words can be played after the first\nRemoves words that can’t be played with <code>current_letters</code> …\nConverts a numeric vector representation into a <code>String</code>\nConverts a word into a numeric vector representation\nHow long it took to solve the board in milliseconds\nNumber of letters present on the board that can be used in …\nNumber of letters present on the board that can be used in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets which indices overlap between <code>previous_board</code> and …\nGets the minimum and maximum columns where a word could be …\nGets the minimum and maximum occupied row and column from …\nAsync command executed by the frontend to get the playable …\nGenerates random letters based on user input\nGets a vector of vectors of each part of a word that can …\nGets the minimum and maximum rows where a word could be …\nGets the current settings\nGets a value from the board at the given index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that a <code>board</code> is valid after a word is played …\nChecks that a <code>board</code> is valid after a word is played …\nChecks whether the <code>board</code> is fully connected; this code is …\nChecks whether a <code>word</code> can be made using the given <code>letters</code>\nThe last game state (if <code>None</code>, then no previous game has …\nThe hand used to make <code>board</code>\nThe letters in the previous hand\nPlayable words using the whole Scrabble dictionary\nThe maximum played column in <code>board</code>\nThe maximum played row in <code>board</code>\nMaximum number of words to check before stopping\nMaximum number of words to check before stopping\nThe minimum played column in <code>board</code>\nThe minimum played row in <code>board</code>\nCreates a new board of dimensions <code>BOARD_SIZE</code>x<code>BOARD_SIZE</code> …\nAsync command executed by the frontend to solve a …\nPlays a new hand of <code>letters</code> on an existing <code>board</code>\nRecursively solves Bananagrams\nTries to play a single letter on the board\nRecursively plays on an existing board by removing letters\nPlays a word on the board\nRedoes an undone play\nWhether a redo can be performed\nStack of undone solutions\nAsync command executed by the frontend to reset the …\nUpdates the settings\nSets a value in the board at the given index\nPlayable words using the shorter dictionary\nThe previous solution\nTries to play a word horizontally anywhere on the <code>board</code>\nTries to play a word vertically anywhere on the <code>board</code>\nUndoes a previous play\nUndoes a play on the <code>board</code>\nWhether an undo can be performed\nStack of previous solutions\nWhether to use the long dictionary or the short one\nWhether to use the long dictionary or the short one")