var searchIndex = JSON.parse('{\
"bananagrams_solver":{"doc":"","t":"DRDERNDNNNEEGRNGDRNNDNRNGMMMMMFLLLLLLLLLLLLLLLLFLLLLLLFFMLLLLLLLLLLLFFLLLLLLLLLFFFMMMFMMMMLFFFFMFFLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLL","n":["AppState","BOARD_SIZE","Board","Direction","EMPTY_VALUE","Finished","GameState","GreaterByMoreThanOne","GreaterByOne","Horizontal","LetterComparison","LetterUsage","Letters","MAX_WORD_LENGTH","Overused","PlaySequence","PlayableWords","REGULAR_TILES","Remaining","Same","Solution","SomeLess","UPPERCASE","Vertical","Word","all_words_long","all_words_short","arr","board","board","board_to_vec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_filter_after_play","clone","clone","clone","clone_into","clone_into","clone_into","convert_array_to_word","convert_word_to_array","elapsed","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_playable_words","get_random_letters","get_val","into","into","into","into","into","into","into","into","is_board_valid_horizontal","is_board_valid_vertical","is_makeable","last_game","letters","long","main","max_col","max_row","min_col","min_row","new","play_bananagrams","play_existing","play_further","play_one_letter","play_sequence","play_word","reset","serialize","serialize","set_val","short","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_play","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"bananagrams_solver"]],"d":["Controls the state of the app","Number rows/columns in the board","A thin wrapper for handling the board","Enumeration of the direction a word is played","Value of an empty cell on the board","All letters have been used","The previous game state","One or more letters are greater by one or more","All letters are the same except exactly one is greater by …","The word was played horizontally","For comparing a current hand of letters to a previous hand","Enumeration of how many letters have been used","Represents a hand of letters","The maximum length of any word in the dictionary","More letters have been used than are available","Represents the previous sequence of plays","Struct returned when getting playable words","The number of each letter present in regular Bananagrams","There are still unused letters","The hand is the same as before","Struct returned when a board is solved","At least one letter has fewer than the previous letter","All uppercase letters in the Latin alphabet","The word was played vertically","A numeric representation of a word","Complete Scrabble dictionary","Dictionary of the ~20k most common words in English","The underlying array of the board","The previous board","The solved board","Converts a <code>board</code> to a <code>String</code>","","","","","","","","","","","","","","","","","Checks which words can be played after the first","","","","","","","Converts a numeric vector representation into a <code>String</code>","Converts a word into a numeric vector representation","How long it took to solve the board","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Async command executed by the frontend to get the playable …","Generates random letters based on user input","Unsafely gets a value from the board at the given index","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks that a <code>board</code> is valid after a word is played …","Checks that a <code>board</code> is valid after a word is played …","Checks whether a <code>word</code> can be made using the given <code>letters</code>","The last game state (if <code>None</code>, then no previous game has …","The hand used to make <code>board</code>","Playable words using the whole Scrabble dictionary","","The maximum played column in <code>board</code>","The maximum played row in <code>board</code>","The minimum played column in <code>board</code>","The minimum played row in <code>board</code>","","Async command executed by the frontend to solve a …","Attempts to play off an existing board","Recursively solves Bananagrams","Tries to play a single letter on the board","The indices played at each level of the recursive chain","Plays a word on the board","Async command executed by the frontend to reset the …","","","Unsafely sets a value in the board at the given index","Playable words using the shorter dictionary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undoes a play on the <code>board</code>","","","","","","","",""],"i":[0,0,0,0,0,8,0,27,27,9,0,0,0,0,8,0,0,0,8,27,0,27,0,9,0,16,16,1,28,21,0,27,28,16,1,8,9,18,21,27,28,16,1,8,9,18,21,0,1,8,9,1,8,9,0,0,21,8,8,9,27,28,16,1,8,9,18,21,0,0,1,27,28,16,1,8,9,18,21,0,0,0,16,28,18,0,28,28,28,28,1,0,0,0,0,28,0,0,18,21,1,18,1,8,9,8,9,27,28,16,1,8,9,18,21,27,28,16,1,8,9,18,21,27,28,16,1,8,9,18,21,0,27,28,16,1,8,9,18,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,2,2],[[4,[[4,[3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[2]],[4,[2]],[6,[2]]],7],[1,1],[8,8],[9,9],[[]],[[]],[[]],[[[4,[2]]],10],[11,[[4,[2]]]],0,[[8,12],13],[[8,12],13],[[9,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[10,14]],[17,[16]]],[[19,[18,10]]]],[[10,14,[17,[16]]],[[19,[[15,[3,20]],10]]]],[[1,2,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,2,2,2,2,2,2,[6,[[4,[2]]]]],7],[[1,2,2,2,2,2,2,2,[6,[[4,[2]]]]],7],[[[4,[2]],[5,[2]]],7],0,0,0,[[]],0,0,0,0,[[],1],[[[15,[10,14]],[17,[16]]],[[19,[21,10]]]],[[4,[4,[[4,[2]]]],[6,[[4,[2]]]],[5,[2]]],22],[[1,2,2,2,2,[4,[[4,[2]]]],[6,[[4,[2]]]],[5,[2]],2,4,4,[24,[23]]],19],[[1,2,2,2,2,2,[6,[[4,[2]]]]],22],0,[[[4,[2]],2,2,1,9,[5,[2]]],19],[[[17,[16]]],[[19,[10]]]],[[18,25],19],[[21,25],19],[[1,2,2,2]],0,[[]],[[]],[[]],[[],10],[[],10],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[1,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"Board"],[15,"usize"],[15,"char"],[3,"Vec"],[15,"array"],[3,"HashSet"],[15,"bool"],[4,"LetterUsage"],[4,"Direction"],[3,"String"],[15,"str"],[3,"Formatter"],[6,"Result"],[15,"i64"],[3,"HashMap"],[3,"AppState"],[3,"State"],[3,"PlayableWords"],[4,"Result"],[15,"u64"],[3,"Solution"],[4,"Option"],[3,"AtomicBool"],[3,"Arc"],[8,"Serializer"],[3,"TypeId"],[4,"LetterComparison"],[3,"GameState"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
